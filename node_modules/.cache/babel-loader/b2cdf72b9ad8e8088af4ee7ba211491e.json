{"ast":null,"code":"var _jsxFileName = \"/Users/thandi/Desktop/Per Scholas/Your-Local-Menu/src/components/Search.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport '../styles/Search.css';\n\nclass Search extends Component {\n  //Im using props because they allow me to pass data from one component to another component, but since props are read-only I need to use state because it is what makes my React components interactive. This helps so that I can have conditional rendering in my react app.  Also, when my state changes, then the corresponding react component gets rendered again. \n  constructor(props) {\n    super(props);\n\n    this.changeHandle = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.submitHandle = event => {\n      event.preventdefault();\n      console.log(this.state);\n      axios.post('https://api.yelp.com/v3/businesses/search', this.state).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      query: '',\n      loading: false\n    };\n  } //I used setState here because this is where the react app is being told that components and children of components need to be rerendered.  \n\n\n  //I'm using render here because I want to render different types of HTML elements into the DOM once the logic has been implemented \n  //Once the state changes it is being passed down as props to the child component and making the app render itself agin\n  render() {\n    const {\n      name\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"holder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search-tag\",\n      htmlFor: \"search-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      id: \"search-input\",\n      value: name,\n      placeholder: \"search\",\n      onChange: this.changeHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 23\n      }\n    }, \" Submit\"), /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"caption\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, \" Search for a restaurant that delivers in San Franciscok\"))));\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/Users/thandi/Desktop/Per Scholas/Your-Local-Menu/src/components/Search.js"],"names":["React","Component","axios","Search","constructor","props","changeHandle","event","setState","target","name","value","submitHandle","preventdefault","console","log","state","post","then","response","catch","error","query","loading","render","submitHandler","changeHandler"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,sBAAP;;AAEA,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAE3B;AAEGG,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SASrBC,YATqB,GASNC,KAAK,IAAI;AACpB,WAAKC,QAAL,CAAc;AAAC,SAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAoBH,KAAK,CAACE,MAAN,CAAaE;AAAlC,OAAd;AACH,KAXoB;;AAAA,SAcrBC,YAdqB,GAcNL,KAAK,IAAI;AACnBA,MAAAA,KAAK,CAACM,cAAN;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACAd,MAAAA,KAAK,CAACe,IAAN,CAAW,2CAAX,EAAwD,KAAKD,KAA7D,EACCE,IADD,CACMC,QAAQ,IAAI;AACdL,QAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AACH,OAHD,EAICC,KAJD,CAIOC,KAAK,IAAI;AACZP,QAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACH,OAND;AAQH,KAzBmB;;AAEd,SAAKL,KAAL,GAAa;AACTM,MAAAA,KAAK,EAAC,EADG;AAETC,MAAAA,OAAO,EAAE;AAFA,KAAb;AAIH,GAVuB,CAY3B;;;AAmBA;AACA;AACGC,EAAAA,MAAM,GAAG;AACN,UAAM;AAACd,MAAAA;AAAD,QAAQ,KAAKM,KAAnB;AAED,wBAGG;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAM,MAAA,QAAQ,EAAE,KAAKS,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,OAAO,EAAC,cAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACA,MAAA,IAAI,EAAE,MADN;AAEA,MAAA,IAAI,EAAE,MAFN;AAGA,MAAA,EAAE,EAAE,cAHJ;AAIA,MAAA,KAAK,EAAGf,IAJR;AAKA,MAAA,WAAW,EAAG,QALd;AAMA,MAAA,QAAQ,EAAG,KAAKgB,aANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAkBI;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA2B,MAAA,IAAI,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAlBJ,eAqBV;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEArBU,CADJ,CAFF,CAHH;AAgCD;;AApEuB;;AAuE3B,eAAevB,MAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios'\nimport '../styles/Search.css'\n\nclass Search extends Component {\n\n    //Im using props because they allow me to pass data from one component to another component, but since props are read-only I need to use state because it is what makes my React components interactive. This helps so that I can have conditional rendering in my react app.  Also, when my state changes, then the corresponding react component gets rendered again. \n    \n       constructor(props){\n           super(props)\n           this.state = {\n               query:'',\n               loading: false\n           };\n       }\n    \n    //I used setState here because this is where the react app is being told that components and children of components need to be rerendered.  \n    changeHandle = event => {\n        this.setState({[event.target.name]:event.target.value})\n    }\n    //cite:https://reactjs.org/docs/forms.html \n    \n    submitHandle = event => {\n         event.preventdefault ()\n         console.log(this.state)\n         axios.post('https://api.yelp.com/v3/businesses/search', this.state)\n         .then(response => {\n             console.log(response)\n         })\n         .catch(error => {\n             console.log(error)\n         })\n      \n     }\n    \n    //I'm using render here because I want to render different types of HTML elements into the DOM once the logic has been implemented \n    //Once the state changes it is being passed down as props to the child component and making the app render itself agin\n       render (){\n          const {name} =this.state\n          \n         return(\n          \n            \n            <div className=\"holder\"> \n            {/* <hr/> */}\n              <form onSubmit={this.submitHandler}>\n                  <div className=\"search-tag\" htmlFor=\"search-input\">\n                      <input \n                      type= \"text\" \n                      name= \"name\" \n                      id =\"search-input\"\n                      value= {name}\n                      placeholder = \"search\"\n                      onChange= {this.changeHandler}\n                      />\n    {/* Onchange lets me know that whenever a form field is changed, then this event needs to fire. React relies on the onchange events to handle what the user inputs in real time. I use value here to set the value of the component \n      \n    cite: https://reactjs.org/docs/dom-elements.html\n        \n        */\n    }\n                   \n                      \n                      {/* <hr/> */}\n                      <button className=\"button\" type=\"submit\"> Submit</button>\n    \n    {/* Button is used to submit the request */}\n        <h1 className=\"caption\"> Search for a restaurant that delivers in San Franciscok</h1>\n                  </div>\n              </form>\n            </div>\n         )\n       }\n    }\n    \n    export default Search"]},"metadata":{},"sourceType":"module"}